{
  "openapi": "3.0.0",
  "info": {
    "title": "Credential Service API for cheqd network",
    "version": "2.0.0",
    "description": "API service to create and manage DIDs, Verifiable Credentials, and DID-Linked Resources",
    "contact": {
      "name": "Cheqd Foundation Limited",
      "url": "https://github.com/cheqd/credential-service",
      "email": "support-github@cheqd.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/cheqd/credential-service/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "Credential",
      "externalDocs": {
        "url": "https://github.com/cheqd/credential-service#readme"
      }
    }
  ],
  "externalDocs": {
    "description": "Credential Service API Documentation",
    "url": "https://docs.cheqd.io/identity"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "paths": {
    "/credential/issue": {
      "post": {
        "tags": [
          "Credential"
        ],
        "summary": "Issue a Verifiable Credential",
        "description": "This endpoint issues a Verifiable Credential. As input it takes the list of issuerDid, subjectDid, attributes, and other parameters of the credential to be issued.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CredentialRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/credential/verify": {
      "post": {
        "tags": [
          "Credential"
        ],
        "summary": "Verify a Verifiable Credential.",
        "description": "This endpoint verifies a Verifiable Credential passed to it. As input, it can take the VC-JWT as a string or the entire credential itself.",
        "operationId": "verify",
        "parameters": [
          {
            "in": "query",
            "name": "verifyStatus",
            "description": "If set to `true` the verification will also check the status of the credential. Requires the VC to have a `credentialStatus` property.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "fetchRemoteContexts",
            "description": "When dealing with JSON-LD you also MUST provide the proper contexts. Set this to `true` ONLY if you want the `@context` URLs to be fetched in case they are a custom context.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CredentialVerifyRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialVerifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IVerifyResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/credential/revoke": {
      "post": {
        "tags": [
          "Credential"
        ],
        "summary": "Revoke a Verifiable Credential.",
        "description": "This endpoint revokes a given Verifiable Credential. As input, it can take the VC-JWT as a string or the entire credential itself. The StatusList2021 resource should already be setup in the VC and `credentialStatus` property present in the VC.",
        "operationId": "revoke",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "publish",
            "description": "Set whether the StatusList2021 resource should be published to the ledger or not. If set to `false`, the StatusList2021 publisher should manually publish the resource.",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CredentialRevokeRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialRevokeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevocationResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/credential/suspend": {
      "post": {
        "tags": [
          "Credential"
        ],
        "summary": "Suspend a Verifiable Credential.",
        "description": "This endpoint suspends a given Verifiable Credential.  As input, it can take the VC-JWT as a string or the entire credential itself.",
        "operationId": "suspend",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "publish",
            "description": "Set whether the StatusList2021 resource should be published to the ledger or not. If set to `false`, the StatusList2021 publisher should manually publish the resource.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CredentialRevokeRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialRevokeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuspensionResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/credential/reinstate": {
      "post": {
        "tags": [
          "Credential"
        ],
        "summary": "Reinstate a suspended Verifiable Credential.",
        "description": "Set whether the StatusList2021 resource should be published to the ledger or not. If set to `false`, the StatusList2021 publisher should manually publish the resource.",
        "operationId": "reinstate",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "publish",
            "description": "Set whether the StatusList2021 resource should be published to the ledger or not. If set to `false`, the StatusList2021 publisher should manually publish the resource.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CredentialRevokeRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialRevokeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnSuspensionResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/presentation/verify": {
      "post": {
        "tags": [
          "Presentation"
        ],
        "summary": "Verify a Verifiable Presentation generated from credential(s).",
        "description": "This endpoint verifies the Verifiable Presentation generated from credential(s). As input, it can take the Verifiable Presentation JWT as a string or the entire Verifiable Presentation itself.",
        "operationId": "presentation",
        "parameters": [
          {
            "in": "query",
            "name": "verifyStatus",
            "description": "If set to `true` the verification will also check the status of the presentation. Requires the VP to have a `credentialStatus` property.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "in": "query",
            "name": "fetchRemoteContexts",
            "description": "When dealing with JSON-LD you also MUST provide the proper contexts. * Set this to `true` ONLY if you want the `@context` URLs to be fetched in case they are a custom context.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PresentationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PresentationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IVerifyResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/account": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create a new custodian-mode client.",
        "description": "This endpoint creates a new custodian-mode client and creates issuer DIDs and Cosmos/cheqd accounts for the client.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      },
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Fetch custodian-mode client details.",
        "description": "This endpoint returns the custodian-mode client details for authenticated users.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/key/create": {
      "post": {
        "tags": [
          "Key"
        ],
        "summary": "Create an identity key pair.",
        "description": "This endpoint creates an identity key pair associated with the user's account for custodian-mode clients.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyResult"
                }
              }
            }
          },
          "400": {
            "description": "A problem with the input fields has occurred. Additional state information plus metadata may be available in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequest"
                },
                "example": {
                  "error": "InvalidRequest"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "An internal error has occurred. Additional state information plus metadata may be available in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequest"
                },
                "example": {
                  "error": "Internal Error"
                }
              }
            }
          }
        }
      }
    },
    "/key/{kid}": {
      "get": {
        "tags": [
          "Key"
        ],
        "summary": "Fetch an identity key pair.",
        "description": "This endpoint fetches an identity key pair's details for a given key ID. Only the user account associated with the custodian-mode client can fetch the key pair.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "kid",
            "description": "Key ID of the identity key pair to fetch.",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyResult"
                }
              }
            }
          },
          "400": {
            "description": "A problem with the input fields has occurred. Additional state information plus metadata may be available in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequest"
                },
                "example": {
                  "error": "InvalidRequest"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "An internal error has occurred. Additional state information plus metadata may be available in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequest"
                },
                "example": {
                  "error": "Internal Error"
                }
              }
            }
          }
        }
      }
    },
    "/did/create": {
      "post": {
        "tags": [
          "DID"
        ],
        "summary": "Create a DID Document.",
        "description": "This endpoint creates a DID and associated DID Document. As input, it can take the DID Document parameters via a form, or the fully-assembled DID Document itself.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DidCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DidCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DidResult"
                }
              }
            }
          },
          "400": {
            "description": "A problem with the input fields has occurred. Additional state information plus metadata may be available in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequest"
                },
                "example": {
                  "error": "InvalidRequest"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "description": "An internal error has occurred. Additional state information plus metadata may be available in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequest"
                },
                "example": {
                  "error": "Internal Error"
                }
              }
            }
          }
        }
      }
    },
    "/did/update": {
      "post": {
        "tags": [
          "DID"
        ],
        "summary": "Update a DID Document.",
        "description": "This endpoint updates a DID Document. As an input, it can take JUST the sections/parameters that need to be updated in the DID Document (in this scenario, it fetches the current DID Document and applies the updated section). Alternatively, it take the fully-assembled DID Document with updated sections as well as unchanged sections.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DidUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DidUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DidResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/did/deactivate/{did}": {
      "post": {
        "tags": [
          "DID"
        ],
        "summary": "Deactivate a DID Document.",
        "description": "This endpoint deactivates a DID Document by taking the DID identifier as input. Must be called and signed by the DID owner.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "did",
            "description": "DID identifier to deactivate.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DidResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/resource/create/{did}": {
      "post": {
        "tags": [
          "Resource"
        ],
        "summary": "Create a DID-Linked Resource.",
        "description": "This endpoint creates a DID-Linked Resource. As input, it can take the DID identifier and the resource parameters via a form, or the fully-assembled resource itself.",
        "parameters": [
          {
            "in": "path",
            "name": "did",
            "description": "DID identifier to link the resource to.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateResourceRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful."
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/did/list": {
      "get": {
        "tags": [
          "DID"
        ],
        "summary": "Fetch DIDs associated with an account.",
        "description": "This endpoint returns the list of DIDs controlled by the account.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/did/{did}": {
      "get": {
        "tags": [
          "DID"
        ],
        "summary": "Resolve a DID Document.",
        "description": "This endpoint resolves the latest DID Document for a given DID identifier.",
        "parameters": [
          {
            "in": "path",
            "name": "did",
            "description": "DID identifier to resolve.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DidDocument"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/credential-status/create": {
      "post": {
        "tags": [
          "Credential Status"
        ],
        "summary": "Create a StatusList2021 credential status list.",
        "description": "This endpoint creates a StatusList2021 credential status list. The StatusList is published as a DID-Linked Resource on ledger. As input, it can can take input parameters needed to create the status list via a form, or a pre-assembled status list in JSON format. Status lists can be created as either encrypted or unencrypted; and with purpose as either revocation or suspension.",
        "parameters": [
          {
            "in": "query",
            "name": "statusPurpose",
            "description": "The purpose of the status list. Can be either revocation or suspension. Once this is set, it cannot be changed. A new status list must be created to change the purpose.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "revocation",
                "suspension"
              ]
            }
          },
          {
            "in": "query",
            "name": "encrypted",
            "description": "Define whether the status list is encrypted. The default is `false`, which means the DID-Linked Resource can be fetched and parsed publicly. Encrypted status lists can only be fetched if the payment conditions are satisfied.",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CredentialStatusCreateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialStatusCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStatusResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/credential-status/publish": {
      "post": {
        "tags": [
          "Credential Status"
        ],
        "summary": "Publish a StatusList2021 credential status list.",
        "description": "Published a pre-assembled StatusList2021 as a DID-Linked Resource. As input, it needs to be provided the `encodedList` property, along with the associated DID-Linked Resource properties in the original status list (if already created previously).",
        "parameters": [
          {
            "in": "query",
            "name": "statusPurpose",
            "description": "The purpose of the status list. Can be either revocation or suspension. Once this is set, it cannot be changed. A new status list must be created to change the purpose.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "revocation",
                "suspension"
              ]
            }
          },
          {
            "in": "query",
            "name": "encrypted",
            "description": "Define whether the status list is encrypted. The default is `false`, which means the DID-Linked Resource can be fetched and parsed publicly. Encrypted status lists can only be fetched if the payment conditions are satisfied. When publishing a new version, this should match the original property.",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CredentialStatusPublishRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialStatusPublishRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStatusResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/credential-status/search": {
      "get": {
        "tags": [
          "Credential Status"
        ],
        "summary": "Fetch StatusList2021 DID-Linked Resource based on search criteria.",
        "parameters": [
          {
            "in": "query",
            "name": "did",
            "description": "The DID of the issuer of the status list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "statusPurpose",
            "description": "The purpose of the status list. Can be either revocation or suspension.",
            "schema": {
              "type": "string",
              "enum": [
                "revocation",
                "suspension"
              ]
            }
          },
          {
            "in": "query",
            "name": "statusListName",
            "description": "The name of the StatusList2021 DID-Linked Resource.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "statusListName": {
                        "type": "string"
                      },
                      "statusListVersion": {
                        "type": "string"
                      },
                      "statusListId": {
                        "type": "string"
                      },
                      "statusListNextVersion": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/credential-status/update": {
      "post": {
        "tags": [
          "Credential Status"
        ],
        "summary": "Update an existing StatusList2021 credential status list.",
        "parameters": [
          {
            "in": "query",
            "name": "statusPurpose",
            "description": "The purpose of the status list. Can be either revocation or suspension. Once this is set, it cannot be changed. A new status list must be created to change the purpose.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "revocation",
                "suspension"
              ]
            }
          },
          {
            "in": "query",
            "name": "encrypted",
            "description": "Define whether the status list is encrypted. The default is `false`, which means the DID-Linked Resource can be fetched and parsed publicly. Encrypted status lists can only be fetched if the payment conditions are satisfied. When publishing a new version, this should match the original property.",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CredentialStatusUpdateRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialStatusUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStatusResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    },
    "/credential-status/check": {
      "post": {
        "tags": [
          "Credential Status"
        ],
        "summary": "Check a StatusList2021 index for a given Verifiable Credential.",
        "description": "This endpoint checks a StatusList2021 index for a given Verifiable Credential and reports whether it is revoked or suspended. It offers a standalone method for checking an index without passing the entire Verifiable Credential or Verifiable Presentation.",
        "parameters": [
          {
            "in": "query",
            "name": "statusPurpose",
            "description": "The purpose of the status list. Can be either revocation or suspension.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "revocation",
                "suspension"
              ]
            }
          },
          {
            "in": "query",
            "name": "encrypted",
            "description": "Define whether the status list is encrypted. The default is `false`, which means the DID-Linked Resource can be fetched and parsed publicly. Encrypted status lists can only be fetched if the payment conditions are satisfied.",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CredentialStatusCheckRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialStatusCheckRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "revoked": {
                      "type": "boolean"
                    },
                    "suspended": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/schemas/InvalidRequest"
          },
          "401": {
            "$ref": "#/components/schemas/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/schemas/InternalError"
          }
        }
      }
    }
  },
  "components": {}
}